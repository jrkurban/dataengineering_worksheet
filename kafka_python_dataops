from kafka import  KafkaConsumer

bootstrap_servers = ['localhost:9092', 'localhost:9292']


# Create a Kafka consumer
consumer = KafkaConsumer("topic1", bootstrap_servers=bootstrap_servers)

# Consume and print the messages from the Kafka topic  q6
for message in consumer:
    print(f"Key: {message.key.decode()}, Value: {message.value.decode()}, Partition: {message.partition}, TS: {message.timestamp}")



from kafka import KafkaProducer
import time

# Define the Kafka topic and bootstrap server
bootstrap_servers = ['localhost:9092', 'localhost:9292']

# Create a Kafka producer
producer = KafkaProducer(bootstrap_servers=bootstrap_servers,
                         client_id='procuder')

# Define the regions and their keys
regions = {
    1: 'Marmara',
    2: 'Ege',
    3: 'Akdeniz',
    4: 'İç Anadolu',
    5: 'Doğu Anadolu',
    6: 'Güneydoğu Anadolu',
    7: 'Karadeniz'
}

# Produce the regions to the Kafka topic with their keys as partition keys
for key, value in regions.items():
    producer.send("topic1", key=str(key).encode("utf-8"), value=value.encode("utf-8"))
    time.sleep(1)  # sleep for 1 second between each message
kafka-python==2.0.2
from kafka.admin import KafkaAdminClient, NewTopic
import time

admin_client = KafkaAdminClient(bootstrap_servers=['127.0.0.1:9092'],
                                client_id='dataops_client')
##list topics
print("Before create topics", admin_client.list_topics())

##create topics

try:
    topic2 = NewTopic(name='topic2', num_partitions=4, replication_factor=3)
    topic3 = NewTopic(name='topic3', num_partitions=2, replication_factor=2)
    topic4 = NewTopic(name='topic4', num_partitions=2, replication_factor=2)

    admin_client.create_topics(new_topics=[topic2, topic3, topic4])
except:
    print("Topics are already exist.")



##list topics
time.sleep(2)
print("After create topics", admin_client.list_topics())

##delete topics
admin_client.delete_topics(topics=['topic2', 'topic3'])

##list topics
time.sleep(2)
print("After delete topics", admin_client.list_topics())

##decribe topic

print("Describe topics", admin_client.describe_topics(topics=['topic4']))

##close client

admin_client.close()

from kafka.admin import NewTopic

def create_a_new_topic_if_not_exists(admin_client, topic_name="example-topic", num_partitions=1, replication_factor=1):
    # check if topic already exists
    topic_metadata = admin_client.list_topics(topic=topic_name)
    if topic_metadata:
        print(f"Topic '{topic_name}' already exists, no action taken")
        return

    # create topic if it doesn't exist
    topic = NewTopic(name=topic_name, num_partitions=num_partitions, replication_factor=replication_factor)
    admin_client.create_topics([topic])
    print(f"Topic '{topic_name}' created with {num_partitions} partitions and a replication factor of {replication_factor}")
